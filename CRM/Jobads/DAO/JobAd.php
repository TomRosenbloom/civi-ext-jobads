<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from jobads/xml/schema/CRM/Jobads/JobAd.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:d6bfd72ed023507bde0aa384ffed7f45)
 */
use CRM_Jobads_ExtensionUtil as E;

/**
 * Database access object for the JobAd entity.
 */
class CRM_Jobads_DAO_JobAd extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_job_ad';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Paths for accessing this entity in the UI.
   *
   * @var string[]
   */
  protected static $_paths = [
    'add' => 'civicrm/jobad/add#?contact_id=[contact_id]',
    'update' => 'civicrm/jobad/add#?JobAd1=[id]',
    'delete' => 'civicrm/jobad?reset=1&action=delete&id=[id]',
  ];

  /**
   * Unique JobAd ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to Contact
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $contact_id;

  /**
   * Name of organisation for the role - could be different from organisation posting the role
   *
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $organisation_name;

  /**
   * Job title
   *
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $job_title;

  /**
   * Full description
   *
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $description;

  /**
   * @var string
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $application_deadline;

  /**
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $website;

  /**
   * Fixed salary
   *
   * @var float|string|null
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $fixed_salary;

  /**
   * Salary from (£)
   *
   * @var float|string|null
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $salary_from;

  /**
   * Salary to (£)
   *
   * @var float|string|null
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $salary_to;

  /**
   * valid value, registered contract type
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $contract_type;

  /**
   * valid value from Full or Part time option group
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $full_or_part_time;

  /**
   * valid value from Salary Rate option group
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $salary_rate;

  /**
   * valid value from Salary Scale option group
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $salary_scale;

  /**
   * valid value from Salary Type option group
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $salary_type;

  /**
   * valid value from Role description option group
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $role_description;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_job_ad';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Job Ads') : E::ts('Job Ad');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'contact_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique JobAd ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.id',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'contact_id' => [
          'name' => 'contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Contact ID'),
          'description' => E::ts('FK to Contact'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.contact_id',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'type' => 'EntityRef',
            'label' => E::ts("Contact"),
          ],
          'add' => NULL,
        ],
        'organisation_name' => [
          'name' => 'organisation_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Organisation name for the role'),
          'description' => E::ts('Name of organisation for the role - could be different from organisation posting the role'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.organisation_name',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'job_title' => [
          'name' => 'job_title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Job title'),
          'description' => E::ts('Job title'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.job_title',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'description' => [
          'name' => 'description',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Full description'),
          'description' => E::ts('Full description'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.description',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'RichTextEditor',
          ],
          'add' => NULL,
        ],
        'application_deadline' => [
          'name' => 'application_deadline',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Application deadline'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.application_deadline',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
          ],
          'add' => NULL,
        ],
        'website' => [
          'name' => 'website',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Website for applying for job'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.website',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'fixed_salary' => [
          'name' => 'fixed_salary',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Fixed salary (£)'),
          'description' => E::ts('Fixed salary'),
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.fixed_salary',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'salary_from' => [
          'name' => 'salary_from',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Salary from'),
          'description' => E::ts('Salary from (£)'),
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.salary_from',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'salary_to' => [
          'name' => 'salary_to',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Salary to'),
          'description' => E::ts('Salary to (£)'),
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.salary_to',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'contract_type' => [
          'name' => 'contract_type',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Contract type'),
          'description' => E::ts('valid value, registered contract type'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.contract_type',
          'default' => '1',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Contract type"),
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'job_ads_contract_type',
            'optionEditPath' => 'civicrm/admin/options/job_ads_contract_type',
          ],
          'add' => NULL,
        ],
        'full_or_part_time' => [
          'name' => 'full_or_part_time',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Full or part time'),
          'description' => E::ts('valid value from Full or Part time option group'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.full_or_part_time',
          'default' => '1',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Full or part time"),
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'job_ads_full_or_part_time',
            'optionEditPath' => 'civicrm/admin/options/job_ads_full_or_part_time',
          ],
          'add' => NULL,
        ],
        'salary_rate' => [
          'name' => 'salary_rate',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Salary rate'),
          'description' => E::ts('valid value from Salary Rate option group'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.salary_rate',
          'default' => '1',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Salary rate"),
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'job_ads_salary_rate',
            'optionEditPath' => 'civicrm/admin/options/job_ads_salary_rate',
          ],
          'add' => NULL,
        ],
        'salary_scale' => [
          'name' => 'salary_scale',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Salary scale'),
          'description' => E::ts('valid value from Salary Scale option group'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.salary_scale',
          'default' => '1',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Salary scale"),
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'job_ads_salary_scale',
            'optionEditPath' => 'civicrm/admin/options/job_ads_salary_scale',
          ],
          'add' => NULL,
        ],
        'salary_type' => [
          'name' => 'salary_type',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Salary type'),
          'description' => E::ts('valid value from Salary Type option group'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.salary_type',
          'default' => '1',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Salary type"),
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'job_ads_salary_type',
            'optionEditPath' => 'civicrm/admin/options/job_ads_salary_type',
          ],
          'add' => NULL,
        ],
        'role_description' => [
          'name' => 'role_description',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Role description'),
          'description' => E::ts('valid value from Role description option group'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_job_ad.role_description',
          'default' => '1',
          'table_name' => 'civicrm_job_ad',
          'entity' => 'JobAd',
          'bao' => 'CRM_Jobads_DAO_JobAd',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Role description"),
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'job_ads_role_description',
            'optionEditPath' => 'civicrm/admin/options/job_ads_role_description',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'job_ad', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'job_ad', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
